import streamlit as st
st.set_page_config(page_title="AI-Powered Research & Learning", layout="centered")
import wikipedia
import datetime
import random
from googletrans import Translator  
import time
import matplotlib.pyplot as plt
import io

# Initialize the translator
translator = Translator()

# Track start time
start_time = time.time()

# Simulated progress tracking
progress_data = {
    "time_spent": 0,  # Time spent in seconds
    "topics_covered": [],
    "quiz_scores": []
}

# Function to update progress
def update_progress(topic, quiz_score=None):
    progress_data["topics_covered"].append(topic)
    progress_data["time_spent"] = int(time.time() - start_time)
    if quiz_score is not None:
        progress_data["quiz_scores"].append(quiz_score)

# Function to fetch data from the web
def fetch_from_web(topic):
    try:
        summary = wikipedia.summary(topic, sentences=5)
        source = wikipedia.page(topic).url
        return summary, source
    except:
        return f"No web content found for {topic}.", "https://en.wikipedia.org/"

# Function to fetch video content
def fetch_from_video(topic):
    transcript = f"This simulated transcript explains the concept of {topic} using real-world examples and visuals to help beginners and advanced learners."
    source = f"https://www.youtube.com/results?search_query={topic.replace(' ', '+')}"
    return transcript, source

# Function to fetch academic content
def fetch_from_academic(topic):
    paper_summary = f"A simulated academic overview on {topic} including theoretical background and latest research findings from recent publications."
    source = f"https://scholar.google.com/scholar?q={topic.replace(' ', '+')}"
    return paper_summary, source

# Function to generate the report
def generate_report(topic, user_profile, research, language_code="en"):
    date = datetime.date.today().strftime("%B %d, %Y")
    divider = "-" * 80

    # Update progress
    update_progress(topic)

    # Generate the report
    report = f"""
📘 **Comprehensive Learning Report on: {topic}**
🗓️ Date: {date}

{divider}

🎯 **Learning Objectives**
{user_profile['learning_goal']}

🧠 **Learner Profile**
- Knowledge Level: {user_profile['knowledge_level']}
- Interest Focus: {user_profile['interest_focus']}
- Preferred Format: {user_profile['preferred_format']}

{divider}

📊 **Progress Metrics**
- Time Spent: {progress_data['time_spent']} seconds
- Topics Covered: {', '.join(progress_data['topics_covered'])}

{divider}

🌐 **Web Content Summary**
{research['web']['content']}

🔗 **Citation**: {research['web']['source']}

{divider}

🎥 **Video Transcript (Simulated)**
{research['video']['content']}

🔗 **Citation**: {research['video']['source']}

{divider}

📚 **Academic Research Summary (Simulated)**
{research['academic']['content']}

🔗 **Citation**: {research['academic']['source']}

{divider}

🔁 **Recommended Additional Resources**
- Read more at: {research['web']['source']}
- Watch tutorials: {research['video']['source']}
- Explore academic papers: {research['academic']['source']}

{divider}

📝 **Recommendations for You**
- Explore beginner-friendly blogs or courses on "{topic}".
- Apply your learning through small projects or quizzes.
- Ask follow-up questions to refine your learning journey.

{divider}

*Report generated by the Enhanced Interactive Learning Assistant*
"""
    # Translate the report if the selected language is not English
    if language_code != "en":
        report = translator.translate(report, dest=language_code).text

    return report

# Function to generate a bar chart
def generate_visual_aid():
    fig, ax = plt.subplots()
    learning_progression = ["Beginner", "Intermediate", "Advanced"]
    values = [1, 2, 3]  # Simulated values for progression
    ax.bar(learning_progression, values, color=["blue", "orange", "green"])
    ax.set_title("Learning Progression")
    ax.set_ylabel("Progression Level")
    ax.set_xlabel("Stages")

    # Save the chart to a buffer
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf

st.title("AI-powered, personalized educational assistant")
st.sidebar.title("Interactive Learning Assistant")
st.markdown("Create a personalized, AI-powered learning report from a topic of your choice.")

# Add a language selection dropdown
st.sidebar.subheader("🌐 Language Settings")
language_options = {
    "English": "en",
    "Spanish": "es",
    "French": "fr",
    "German": "de",
    "Chinese (Simplified)": "zh-cn",
    "Hindi": "hi",
    "Bengali": "bn",
    "Tamil": "ta",
    "Telugu": "te",
    "Marathi": "mr",
    "Gujarati": "gu",
    "Kannada": "kn",
    "Malayalam": "ml",
    "Punjabi": "pa",
    "Odia": "or",
    "Assamese": "as",
    "Urdu": "ur"
}
selected_language = st.sidebar.selectbox("Select your preferred language:", list(language_options.keys()))
selected_language_code = language_options[selected_language]

topic = st.text_input("🔍 Enter a learning topic:")

# Main Streamlit app
if topic:
    st.subheader("🧠 Clarifying Questions")
    learning_goal = st.text_input("🎯 What do you want to learn or achieve?")
    interest_focus = st.text_input("📌 Any specific areas or subtopics you're interested in?")
    knowledge_level = st.selectbox("📘 Your prior knowledge level:", ["Beginner", "Intermediate", "Advanced"])
    preferred_format = st.selectbox("🖥️ Preferred learning format:", ["Text", "Video", "Hands-on Examples"])

    user_profile = {
        "learning_goal": learning_goal or "General understanding",
        "interest_focus": interest_focus or "None specified",
        "knowledge_level": knowledge_level,
        "preferred_format": preferred_format
    }

    # Pass the selected language code to the generate_report function
    if st.button("📄 Generate Learning Report"):
        with st.spinner("Fetching and synthesizing information..."):
            web_summary, web_source = fetch_from_web(topic)
            video_transcript, video_source = fetch_from_video(topic)
            academic_summary, academic_source = fetch_from_academic(topic)

            research = {
                "web": {"content": web_summary, "source": web_source},
                "video": {"content": video_transcript, "source": video_source},
                "academic": {"content": academic_summary, "source": academic_source}
            }

            # Generate the report
            report = generate_report(topic, user_profile, research, selected_language_code)

            # Generate the visual aid
            visual_aid = generate_visual_aid()

            st.success("✅ Report generated successfully!")
            st.text_area("📝 Learning Report Preview", value=report, height=500)

            # Display the visual aid
            st.subheader("📊 Visual Aid")
            st.image(visual_aid, caption="Learning Progression", use_column_width=True)

            # Add a download button for the generated report in TXT format
            st.download_button(
                label="📥 Download as TXT",
                data=report,
                file_name=f"{topic}_report.txt",
                mime="text/plain"
            )

            # Allow users to provide follow-up questions or feedback
            follow_up_question = st.text_input("🔄 Add a follow-up question or feedback:")

            if follow_up_question:
                st.info(f"Processing follow-up: {follow_up_question}")
                # Regenerate the report based on the follow-up question
                # (For now, this is simulated. You can implement logic to refine the report.)
                updated_report = f"{report}\n\n🔄 **Follow-Up Question:** {follow_up_question}\n\n*Updated content will be added here.*"
                st.text_area("📝 Updated Report Preview", value=updated_report, height=500)

else:
    st.warning("Please enter a topic to begin.")